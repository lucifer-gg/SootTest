public class A extends father
{
    public java.lang.String load;
    public static java.lang.String staticLoadA;
    public static B b;

    public static java.lang.String foo()
    {
        java.lang.StringBuilder $stack2, $stack3, $stack4;
        java.lang.String res;
        byte a;
        int a#2;

        a = 1;

        a#2 = a + 1;

        $stack2 = new java.lang.StringBuilder;

        specialinvoke $stack2.<java.lang.StringBuilder: void <init>()>();

        $stack3 = virtualinvoke $stack2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(a#2);

        $stack4 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        res = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.String toString()>();

        return res;
    }

    public void <init>(java.lang.String)
    {
        A this;
        java.lang.String load;

        this := @this: A;

        load := @parameter0: java.lang.String;

        specialinvoke this.<father: void <init>()>();

        this.<A: java.lang.String load> = load;

        return;
    }

    public java.lang.String getLoad()
    {
        A this;
        java.lang.String $stack1;

        this := @this: A;

        $stack1 = this.<A: java.lang.String load>;

        return $stack1;
    }

    static void <clinit>()
    {
        B $stack0;

        $stack0 = new B;

        specialinvoke $stack0.<B: void <init>()>();

        <A: B b> = $stack0;

        return;
    }
}
